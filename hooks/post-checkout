#!/usr/bin/env bash
# Written by Eric Crosson
# 2016-10-12
#
# This hook can be used to save metadata about where a git repository
# is cloned locally.  The intent is to use this information in other
# scripts that operate on the cloned git repository.
# path to the newly cloned repo on disk

readonly REPO=$(git rev-parse --show-toplevel)
export REPO
echo "proenv:: setting up ${REPO}" >&2

main() {
    rm -rf -- "${REPO}/.git/hooks"
    initializeSubmodules
    installClonedReposHooks
    invokeClonedReposPostCloneHook
}

initializeSubmodules() {
    git submodule update --init --recursive
}

installClonedReposHooks() {
    cd "${REPO}/.git"
    rm -rf hooks

    do_push=no
    # if missing create .githooks w/ dot.d structure from proenv/share/hooks
    if [[ ! -d ${REPO}/.githooks ]]; then
      mv -f "${REPO}/.git/share/hooks" "${REPO}/.githooks"
      msg='proenv:: add/commit/push .githooks dot.d structure'
      cd "${REPO}"
      git add "${REPO}/.githooks"
      git commit -m "$msg"
      git push
      cd "${REPO}/.git"
      echo "$msg" >&2
    else
      rm -rf "${REPO}/.git/share/hooks"
    fi

    # invoke proenv install script
    cd "${REPO}"
    source "${REPO}/.git/install"
    cd "${REPO}/.git"

    # now link hooks
    ln -sf ../.githooks ./hooks
    cd - >/dev/null
}

invokeClonedReposPostCloneHook() {
  if [[ -d ${REPO}/.git/hooks/post-clone.d ]]; then
    for pc in $(find ${REPO}/.git/hooks/post-clone.d -mindepth 1); do
      [[ -x ${pc} ]] && ${pc}
    done
  else
    local -r post_clone_hook="${REPO}/.git/hooks/post-clone"
    test ! -e "${post_clone_hook}" && return
    chmod u+x "${post_clone_hook}"
    ${post_clone_hook}
  fi
}

main "$@"

